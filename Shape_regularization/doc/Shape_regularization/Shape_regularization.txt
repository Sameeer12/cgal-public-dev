namespace CGAL {
/*!

\mainpage User Manual
\anchor Chapter_Shape_regularization

\cgalAutoToc

\cgalFigureBegin{fig_ShapeRegularization, example_angles_100_segments_after.png}
Example of the Shape regularization algorithm for angle regularization. See 
\ref ShapeRegularization_2d_angle_regularization.
\cgalFigureEnd

\authors Jean-Philippe Bauchet, Florent Lafarge, Gennadii Sytov, Dmitry Anisimov

\section ShapeRegularization_introduction Introduction

The shape regularization algorithm is based on the "Global regularization" algorithm
from the <a href="http://openaccess.thecvf.com/content_cvpr_2018/papers/Bauchet_KIPPI_KInetic_Polygonal_CVPR_2018_paper.pdf">
"KIPPI: Kinetic Polygonal Partitioning of Images"</a> article
written by Jean-Philippe Bauchet and Florent Lafarge at Inria.
The shape regularization algorithm works as follows:
 1. Computes neighbors of each item in the data set;
 2. Computes objective function values among these neighbors;
 3. Solves the quadratic programming problem;
 4. Sorts items into groups based on the regularized objective function values;
 5. Updates items within each regularized group.

Two particular instances of this algorithm are provided:
- \ref ShapeRegularization_2d_regularization "2D" regularization of segments;
- \ref ShapeRegularization_3d_regularization "3D" regularization of planes;

Other instances can be added by the user, as explained below.

\section ShapeRegularization_framework Framework

The main class `CGAL::Regularization::Shape_regularization` is parameterized by
- GeomTraits that specifes the Kernel type;
- InputRange that stores a range of user-defined input items;
- NeighborQuery that provides the means for accessing neighbors of an item;
- RegularizationType that determines which regularization type to apply;

The `CGAL::Regularization::Shape_regularization` uses the 
<a href="https://osqp.org/docs/">Operator Splitting Quadratic Program (OSQP) solver</a> 
to solve the quadratic programming problem. The <a href="https://osqp.org/docs/">OSQP solver</a>
is a very efficient QP solver that works with sparce matrices and has an open-source project 
license to any academic or commercial applications.

Using this generic framework, users can regularize any set 
of arbitrary items with their own regularization type. 

\subsection ShapeRegularization_neighborhood Neighborhood

The concept `NeighborQuery` provides the means for accessing neighbors of an item. 
To create a model that respects this concept, the user has to provide an overload of the operator:

- `NeighborQuery::operator()()` that has to fill a vector with indices of all items, which 
are neighbors of the query item.

\subsection ShapeRegularization_regularization_type Regularization type

The concept `RegularizationType` determines the type of regularization which will be applied.
To create a model that respects this concept, three functions have to be defined:

- `RegularizationType::target_value()` This function computes and returns an objective 
function value between 2 neighbor items.

- `RegularizationType::bound()` This function returns a max bound on an item value that is regularized.

- `RegularizationType::update()` This function updates items with respect to the regularized item values.

\subsection ShapeRegularization_examples Examples

Here will be examples.

\section ShapeRegularization_2d_regularization 2D Regularization

This CGAL component provides the corresponding models of the concepts 
NeighborQuery and RegularizationType. In particular, it provides a way to define neighbors of a segment:

- `CGAL::Regularization::Delaunay_neighbor_query_2` - finds the neighbors of each segment by constructing the 
Delaunay triangulation using the <a href="https://doc.cgal.org/latest/Triangulation_2/index.html#title11">CGAL::Delaunay_triangulation_2</a> class.

In addition to the NeighborQuery class, it provides 2 ways to define RegularizationType:

- `CGAL::Regularization::Angle_regularization_2` - re-orients segments to preserve parallelism and orthogonality.
- `CGAL::Regularization::Ordinate_regularization_2` - re-aligns segments to preserve collinearity.

\subsection ShapeRegularization_2d_delaunay_neighbor_query Delaunay neighbor query

This class finds the neighbors of each segment by constructing a 
Delaunay triangulation using the <a href="https://doc.cgal.org/latest/Triangulation_2/index.html#title11">CGAL::Delaunay_triangulation_2</a> class.

The Delaunay neighbor query class constructs the Delaunay triangulation from a group of segments, 
which has to be provided by the user using the `CGAL::Regularization::Delaunay_neighbor_query_2::add_group()` 
function, and finds neighbors for each segment in the provided group. The Delaunay triangulation 
can be constructed only for a group of minimum 2 segments.

\subsection ShapeRegularization_2d_angle_regularization Angle Regularization

This class re-orients segments to preserve parallelism and orthogonality. 
In order to apply the angle regularization on a set of segments, the user has to: 
- Specifiy the angle bound in the constructor. The bound value
for the angle regularization has to be within the \f$[0, 90)\f$ degree interval. If no bound is provided,
a bound of \f$25^{\circ}\f$ will be set as the default value.
- Add groups of segments using the `CGAL::Regularization::Angle_regularization_2::add_group()` function. If the user does not have
specific groups in mind, a vector of all indices of segments from `InputRange` has to be provided as one group.

\cgalFigureBegin{Angle_regularization_2_example_before, example_angles_100_segments_before.png}
A generated set of 2D segments before the angle regularization.
\cgalFigureEnd

\cgalFigureBegin{Angle_regularization_2_example_after, example_angles_100_segments_after.png}
A generated set of 2D segments after the angle regularization.
\cgalFigureEnd

Typical usage of the shape regularization algorithm for angle regularization consists of the following steps:
 1. Define an input range with segments;
 2. Create instances of the classes `NeighborQuery` and `RegularizationType` with the proper parameters;
 3. If using the `CGAL::Regularization::Delaunay_neighbor_query_2` and `CGAL::Regularization::Angle_regularization_2` classes,
 add groups of segments to those classes using the `CGAL::Regularization::Delaunay_neighbor_query_2::add_group()` 
 and `CGAL::Regularization::Angle_regularization_2::add_group()` functions;
 4. Create an instance of the class `CGAL::Regularization::Shape_regularization`;
 5. Regularize;
 6. Optional: the user can use the `CGAL::Regularization::Angle_regularization_2::parallel_groups()` 
function to obtain groups of parallel segments which were created during the regularization process. 
This is important if the user wants to apply the ordinate regularization thereafter.

The following example demonstrates the usage of the shape regularization algorithm for angle regularization 
on a set of 100 randomly generated segments using the 
<a href="https://doc.cgal.org/latest/Generator/index.html">CGAL Geometric Object Generators</a>.
The entire `InputRange` is provided to the Angle regularization class as one group.
The angle regularization bound is set to \f$40^{\circ}\f$. The `CGAL::Exact_predicates_inexact_constructions_kernel`
Kernel is used in the following example:

\cgalExample{Shape_regularization/example_angles_100_segments.cpp}

\subsection ShapeRegularization_2d_ordinate_regularization Ordinate Regularization

This class re-aligns segments to preserve collinearity. 
In order to apply the ordinate regularization on a set of segments, the user has to: 
- Specify the ordinate value bound in the constructor. The bound value
for the ordinate regularization has to be within the \f$[0, \infty)\f$ interval. If no bound is provided,
a bound of \f$0.1\f$ will be set as the default value.
- Add groups of parallel segments using the `CGAL::Regularization::Ordinate_regularization_2::add_group()` function. 
If the user does not have parallel groups, the groups may be obtained from the angle regularization class or by using the 
`CGAL::Regularization::Parallel_groups_2` class.

\cgalFigureBegin{Ordinate_regularization_2_example_before, example_ordinates_100_segments_before.png}
A generated set of 2D segments before the ordinate regularization.
\cgalFigureEnd

\cgalFigureBegin{Ordinateregularization_2_example_after, example_ordinates_100_segments_after.png}
A generated set of 2D segments after the ordinate regularization.
\cgalFigureEnd

Typical usage of the shape regularization for ordinates consists of the following steps:
 1. Define an input range with segments;
 2. Create instances of the classes NeighborQuery and RegularizationType with the proper parameters;
 3. Obtain groups of parallel segments. The user can use `CGAL::Regularization::Angle_regularization_2::parallel_groups()`
 or `CGAL::Regularization::Parallel_groups_2::parallel_groups()` for this purpose.
 4. If using the `CGAL::Regularization::Delaunay_neighbor_query_2` and `CGAL::Regularization::Ordinate_regularization_2` 
 classes, add those groups to the aforementioned classes using the `CGAL::Regularization::Delaunay_neighbor_query_2::add_group()` 
 and `CGAL::Regularization::Ordinate_regularization_2::add_group()` functions;
 5. Create an instance of the class CGAL::Regularization::Shape_regularization;
 6. Regularize;

The following example demonstrates the usage of the shape regularization algorithm for ordinate regularization 
on a set of 100 parallel segments located in a circle. The `CGAL::Regularization::Parallel_groups_2` class
is used to obtain groups of parallel segments within the \f$1^{\circ}\f$ bound. 
The ordinate regularization bound is set to \f$0.25\f$. The `CGAL::Simple_cartesian<double>` Kernel is used
in the following example:

\cgalExample{Shape_regularization/example_ordinates_100_segments.cpp}

\subsection ShapeRegularization_2d_examples Examples

The following examples demonstrate the usage of the shape regularization algorithm for 
both angle regularization and ordinate regularization sequentially.

\subsubsection ShapeRegularization_2d_examples_simple Simple example

This example contains 15 2D segments. The angle and ordinate regularizations are performed on these segments
using bounds of \f$3.85^{\circ}\f$ and \f$0.1\f$ respectively. The `CGAL::Exact_predicates_inexact_constructions_kernel`
Kernel is used in the following example:

\cgalFigureBegin{Simple_example_before, example_15_segments_before.png}
A set of 2D segments before the shape regularization.
\cgalFigureEnd

\cgalFigureBegin{Simple_example_after, example_15_segments_after.png}
A set of 2D segments after the shape regularization.
\cgalFigureEnd

\cgalExample{Shape_regularization/example_15_segments.cpp}

\subsubsection ShapeRegularization_2d_examples_advance Real data example

This example contains 65 2D segments which are constructed from a set of 2D points obtained from the
<a href="https://cgal.geometryfactory.com/CGAL/doc/master/Shape_detection/index.html#Shape_detection_RegionGrowingPoints_examples">
`CGAL::Shape_detection::Region_growing`</a> algorithm.
The angle and ordinate regularizations are performed on these segments
using bounds of \f$60^{\circ}\f$ and \f$0.95\f$ respectively.
The `CGAL::Exact_predicates_inexact_constructions_kernel` Kernel is used in the following example:

\cgalFigureBegin{Real_data_example_before, example_real_data_before.png}
A set of 2D segments before the shape regularization.
\cgalFigureEnd

\cgalFigureBegin{Real_data_example_after, example_real_data_after.png}
A set of 2D segments after the shape regularization.
\cgalFigureEnd

\cgalExample{Shape_regularization/example_real_data.cpp}

\subsection ShapeRegularization_2d_performance Performance

The shape regularization algorithm is very efficient due to the fact that it has 
a linear level of complexity to obtain the neighbors of each item and their objective 
function values and to construct the QP solver data. The <a href="https://osqp.org/docs/">OSQP solver</a> 
is also highly efficient due to the fact that it uses a custom ADMM-based first-order 
method requiring only a single matrix factorization in the setup phase and implements 
custom sparse linear algebra routines exploiting structures in the problem data.

The table below contains information about the described examples above: 

<table class="markdownTable" align="center">
<tr class="markdownTableHead">
<th class="markdownTableHeadCenter">Example </th><th class="markdownTableHeadCenter">Number of segments </th><th class="markdownTableHeadCenter">Number of modified segments: Angle regularization  </th><th class="markdownTableHeadCenter">Number of modified segments: Ordinate regularization  </th><th class="markdownTableHeadCenter">Time (in seconds): Angle regularization </th><th class="markdownTableHeadCenter">Time (in seconds): Ordinate regularization </th></tr>
<tr class="markdownTableBody">
<td class="markdownTableBodyCenter">example_15_segments  </td><td class="markdownTableBodyCenter">15  </td><td class="markdownTableBodyCenter">15  </td><td class="markdownTableBodyCenter">11  </td><td class="markdownTableBodyCenter">0.000247   </td><td class="markdownTableBodyCenter">0.000140   </td></tr>
<tr class="markdownTableBody">
<td class="markdownTableBodyCenter">example_angles_100_segments  </td><td class="markdownTableBodyCenter">100  </td><td class="markdownTableBodyCenter">100  </td><td class="markdownTableBodyCenter">N/A  </td><td class="markdownTableBodyCenter">0.002310   </td><td class="markdownTableBodyCenter">N/A  </td></tr>
<tr class="markdownTableBody">
<td class="markdownTableBodyCenter">example_ordinates_100_segments  </td><td class="markdownTableBodyCenter">100  </td><td class="markdownTableBodyCenter">N/A  </td><td class="markdownTableBodyCenter">100  </td><td class="markdownTableBodyCenter">N/A   </td><td class="markdownTableBodyCenter">0.001109  </td></tr>
<tr class="markdownTableBody">
<td class="markdownTableBodyCenter">example_real_data  </td><td class="markdownTableBodyCenter">65  </td><td class="markdownTableBodyCenter">65 </td><td class="markdownTableBodyCenter">64  </td><td class="markdownTableBodyCenter">0.001873   </td><td class="markdownTableBodyCenter">0.000396  </td></tr>
</table>

\section ShapeRegularization_3d_regularization 3D Regularization

A section about 3D regularization will be here

\subsection ShapeRegularization_3d_delaunay_neighbor_query Delaunay neighbor query

A section will be here.

\subsection ShapeRegularization_3d_angle_regularization Angle Regularization

A section will be here.

\subsection ShapeRegularization_3d_ordinate_regularization Ordinate Regularization

A section will be here.

\subsection ShapeRegularization_3d_examples Examples

A section will be here.

\subsection ShapeRegularization_3d_performance Performance

A section will be here.


\section ShapeRegularization_utilities Utilities

The following utility classes are provided for the user:

\subsection ShapeRegularization_parallel_groups_2 Parallel groups

The `CGAL::Regularization::Parallel_groups_2` class is created to allow users to form groups of parallel segments
without applying the shape regularization for the angle regularization algorithm. This class is parameterized as follows:
- GeomTraits that specifes the Kernel type;
- InputRange that stores a range of user-defined input items;
- SegmentMap that provides the means for accessing items from the InputRange;

In order to create groups of segments based on the principle of parallelism from a set of segments, the user has to:
- set the `tolerance` value within the \f$(0, \infty)\f$ interval. If no value is provided, the `tolerance` is set to
\f$1000000\f$. The greater the `tolerance` value becomes, the lower the grouping angle becomes, i.e. the `tolerance` value of 
\f$1\f$ is equal to the angle bound of \f$1^{\circ}\f$, the `tolerance` value of \f$10\f$ is equal to the angle bound 
of \f$0.1^{\circ}\f$ and etc.

The user can acces the parallel groups using the `CGAL::Regularization::Parallel_groups_2::parallel_groups()` function.

\section ShapeRegularization_history History

The shape regularization algorithm on a 2D segment set was first implemented by Jean-Philippe Bauchet 
under the supervision of Florent Lafarge and then generalized by Gennadii Sytov during the Google Summer 
of Code 2019 under the supervision of Dmitry Anisimov.

\section ShapeRegularization_acknowledgement Acknowledgement

Section on acknowledgement will be here...

*/
} /* namespace CGAL */
